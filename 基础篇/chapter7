7.组件详解
7.1组件复用

组件注册：（1）全局注册 Vue.component('my-component',{//内容})
          （2）局部注册 components:{'my-component'}
Vue组件的模板在某些情况下会受到html的限制，如在<table>,<ul>,<ol>,<select>内直接使用组件是无效的
可以使用特殊的is属性来挂载组件
组件中使用data与实例的区别：组件中，data必须是函数，将数据return出去

7.2使用props传递数据
父组件正向地向子组件传递数据：使用选项props来声明需要从父级接受的数据。props选项的值可以是数组或对象
Vue2.x通过props传递数据是单向的

7.3组件通信
（1）父子组件通信
    1）子组件向父组件传递数据时：使用自定义事件
       子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件
       父组件也可以直接在子组件的自定义标签上使用v-on来监听子组件触发的自定义事件
    2）使用v-model
       实现一个具有双向绑定的V-model组件需满足两个要求：（1）接收一个value属性；（2）在有新的value时触发input事件
（2）兄弟组件通信
     推荐使用一个空的Vue实例来作为中央事件总线（bus），巧妙轻量地实现了任何组件间的通信
（3）跨级组件通信
     父链：在子组件中，用this.$parent直接访问该组件的父实例或组件
           在父组件中，通过this.$children来访问它所有的子组件
           可以递归向上或向下无限访问，直到根实例或最内层的组件
           但父子组件通信最后还是使用props和$emit
     子组件索引：用特殊属性ref来为子组件指定一个索引名称，在父组件中通过this.$refs来访问指定名称的子组件
     $refs只在组件渲染完成后才填充，并且是非响应式的

7.4使用slot分发内容
当需要让组件混合使用，混合父组件的内容与子组件的模板时，就会用到slot，这个过程叫内容分发。
props传递数据，events触发事件和slot内容分发构成了Vue组件的3个API来源。
slot分发的内容，作用域是在父组件上的。

7.5组件高级用法
递归组件
内联模板inline-template:组件会把它的内容当做模板，而不是把它当做内容分发
动态组件：<component>动态挂载不同的组件，使用is特性来选择要挂载的组件
异步组件
Vue.js允许将组件定义为一个工厂函数，动态地解析组件。Vue.js只在组件需要渲染时触发工厂函数，并且把结果缓存起来，
用于后面的再次渲染。

7.6其他
（1）$nextTick
异步更新队列：Vue在观察到数据变化时并不是直接去更新DOM，而是开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。
在缓冲时会去除重复数据，从而避免不必要的计算和DOM操作。
然后，在下一个事件循环tick，Vue刷新队列并执行实际（已去重）工作。
（2）X-Templates
（3）手动挂载实例：Vue.extend    $mount两个方法
