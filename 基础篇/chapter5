5.内置指令
5.1 基本指令
v-cloak:不需要表达式，会在vue实例结束编译时从绑定的HTML元素上移除，经常和css的display:none配合使用
[v-cloak]{ display:none}:在简单的项目中，是一个解决初始化慢导致页面闪动的最佳实践
v-once:不需要表达式，作用是定义它的元素或组件只渲染一次，包括元素或组件的所有子节点。
       首次渲染后，不再随数据的变化重新渲染，将被视为静态内容。
5.2条件渲染指令
v-if,v-else-if,v-else
vue在渲染元素时，出于效率考虑，会尽可能地复用已有元素而非重新渲染
如果不希望这样做，可以使用key属性（值必须唯一）
v-show:用法与v-if基本一致。v-show是改变元素的css属性display。
5.2.3v-if与v-show的选择
v-if是真正的条件渲染。它会根据表达式适当地重建元素及绑定的事件或子组件，只有当条件变为真时才开始编译。
    适合条件不经常改变的场景，因为切换开销相对较大。
v-show只是简单的css属性切换，无论条件真与否，都会被编译。适用于频繁切换条件。

5.3列表渲染指令v-for
需要将一个数组遍历或枚举一个对象循环显示时，就会用到列表渲染指令v-for,表达式需结合in来使用
v-for的表达式支持一个可选参数作为当前项的索引v-for="(book,index) in books"
v-for也可以用在内置标签<template>上，将多个元素进行渲染
v-for也可以遍历对象属性，遍历对象属性时，有两个可选参数，分别是键名和索引
v-for也可以迭代整数
5.3.2数组更新
vue的核心是数据与视图的双向绑定
vue包含一组观察数组变异的方法，使用它们改变数组也会触发视图更新：
push(),pop(),shift(),unshift(),splice(),sort(),reverse()
有些方法不会改变原数组：filter(),concat(),slice(),使用这些非变异方法时，会用新数组替换原数组
Vue在检测到数组变化时，并不是重新直接渲染整个列表，而是最大化地复用DOM元素。
替换的数组中，含有相同元素的项不会被重新渲染。因此不用担心性能问题。
以下变动的数组中，Vue不能检测到，也不会触发视图更新：
（1）通过索引直接设置项，如app.books[3]={...}
     解决办法：（1）使用Vue内置的set方法（webpack:$set）
                (2)splice
（2）修改数组长度，如app.books.length=1
    解决方法：splice
5.3.3过滤与排序
当不想改变原数组，想通过一个数组的副本来做过滤或排序的显示时，使用计算属性来返回过滤或排序后的数组。

5.4方法与事件
@click调用的方法名后可以不跟括号
Vue提供了一个特殊变量$event，用于访问原生DOM事件
5.4.2修饰符
.stop  .prevent  .capture  .self  .once
.enter .tab .delete .esc .space .up .down .left .right
.ctrl .alt .shift .command .meta